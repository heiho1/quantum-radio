name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, docker-containerization ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  # Unit Tests Job
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test
        
      - name: Generate test coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: quantum-radio-coverage
          fail_ci_if_error: false
          
  # Security Audit Job
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm run test:security
        continue-on-error: true
        id: audit
        
      - name: Create security report
        if: always()
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "Security audit completed for commit ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.audit.outcome }}" = "failure" ]; then
            echo "⚠️ Security vulnerabilities found. Review the audit output above." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security vulnerabilities found." >> $GITHUB_STEP_SUMMARY
          fi
          
  # Docker Build Job
  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build development image
        run: docker build -f Dockerfile.dev -t quantum-radio:dev .
        
      - name: Build production image
        run: docker build -t quantum-radio:latest .
        
      - name: Test development container
        run: |
          docker run -d --name test-dev -p 3001:3000 quantum-radio:dev
          sleep 10
          curl -f http://localhost:3001/api/users || exit 1
          docker stop test-dev
          docker rm test-dev
          
      - name: Test production container
        run: |
          docker run -d --name test-prod -p 3000:3000 quantum-radio:latest
          sleep 10
          curl -f http://localhost:3000/api/users || exit 1
          docker stop test-prod
          docker rm test-prod
          
  # Code Quality Job
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for linting (if configured)
        run: |
          if npm run lint --silent 2>/dev/null; then
            echo "✅ Linting passed"
          else
            echo "ℹ️ No linting configured"
          fi
        continue-on-error: true
        
      - name: Check package vulnerabilities
        run: |
          echo "## Package Audit Summary" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level info --json > audit.json || true
          
          # Parse and display audit summary
          CRITICAL=$(cat audit.json | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit.json | jq -r '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat audit.json | jq -r '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat audit.json | jq -r '.metadata.vulnerabilities.low // 0')
          
          echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- **Moderate**: $MODERATE" >> $GITHUB_STEP_SUMMARY
          echo "- **Low**: $LOW" >> $GITHUB_STEP_SUMMARY
          
  # Deploy Job (runs only on main/master)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker, quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy notification
        run: |
          echo "## 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "Application ready for staging deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ✅ Audited" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: ✅ Built" >> $GITHUB_STEP_SUMMARY